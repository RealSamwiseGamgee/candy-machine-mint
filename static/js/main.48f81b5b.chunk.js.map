{"version":3,"sources":["candy-machine.ts","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","tokenMint","goLiveDate","Date","toString","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","associatedTokenAccountAddress","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","remainingAccounts","push","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","undefined","setTokenMint","setAssociatedTokenAccountAddress","setItemsAvailable","setItemsRedeemed","setItemsRemaining","open","message","severity","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","updateBalance","getMintInfo","mintInfo","getAccountInfo","associatedTokenAccountInfo","amount","decimals","getBalance","LAMPORTS_PER_SOL","refreshCandyMachineState","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","onMint","mintTxId","txTimeout","msg","code","indexOf","useEffect","toBase58","toLocaleString","disabled","onClick","variant","CircularProgress","date","onMount","onComplete","renderer","Snackbar","autoHideDuration","onClose","Alert","process","network","Connection","startDateSeed","parseInt","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48f81b5b.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date;\n  tokenMint?: anchor.web3.PublicKey;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  console.log(\"-- state: \", state);\n\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const tokenMint = state.tokenMint;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  console.log(\"-- candy machine: \", {\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate: goLiveDate.toString(),\n    tokenMint: tokenMint.toString(),\n  })\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n    tokenMint,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n  associatedTokenAccountAddress?: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  const remainingAccounts = [];\n  if (associatedTokenAccountAddress) {\n    remainingAccounts.push({ pubkey: associatedTokenAccountAddress, isWritable: true, isSigner: false });\n    remainingAccounts.push({ pubkey: payer, isWritable: false, isSigner: true });\n  }\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    remainingAccounts,\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\nimport { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n  const [tokenMint, setTokenMint] = useState<PublicKey | undefined>(undefined); // Custom spl token for mint price. Typically undefined\n  const [associatedTokenAccountAddress, setAssociatedTokenAccountAddress] = useState<PublicKey | undefined>(undefined); // Associated token for custom spl mint\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const updateBalance = async () => {\n    if (wallet?.publicKey) {\n      if (tokenMint && associatedTokenAccountAddress) {\n        const token = new Token(\n          props.connection,\n          tokenMint,\n          TOKEN_PROGRAM_ID,\n          // @ts-ignore\n          wallet,\n        );\n        const mintInfo = await token.getMintInfo();\n        console.log(\"-- mintInfo: \", mintInfo);\n        console.log(\"-- mintInfo.mintAuthority: \", mintInfo.mintAuthority);\n        // console.log(mintInfo.mintAuthority.toString());\n        try {\n          const associatedTokenAccountInfo = await token.getAccountInfo(associatedTokenAccountAddress);\n          console.log(\"-- associatedTokenAccountInfo: \", associatedTokenAccountInfo);\n          console.log(\"-- associatedTokenAccountInfo.amount: \", associatedTokenAccountInfo.amount.toNumber());\n          console.log(\"-- associatedTokenAccountInfo.amount: \", associatedTokenAccountInfo.amount.toNumber() / 10 ** mintInfo.decimals);\n          setBalance(associatedTokenAccountInfo.amount.toNumber() / 10 ** mintInfo.decimals);\n        } catch (err) {\n          setBalance(0);\n        }\n        return;\n      }\n      const balance = await props.connection.getBalance(wallet.publicKey);\n      setBalance(balance / LAMPORTS_PER_SOL);\n    }\n  }\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed,\n        tokenMint,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n\n      if (tokenMint) {\n        const associatedTokenAccountAddress = await Token.getAssociatedTokenAddress(\n          ASSOCIATED_TOKEN_PROGRAM_ID,\n          TOKEN_PROGRAM_ID,\n          tokenMint,\n          wallet.publicKey\n        )\n        setTokenMint(tokenMint);\n        setAssociatedTokenAccountAddress(associatedTokenAccountAddress);\n        console.log(\"-- associatedTokenAccountAddress: \", associatedTokenAccountAddress.toString());\n      }\n\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury,\n          associatedTokenAccountAddress\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      console.log(\"-- error: \", message);\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        await updateBalance();\n        // const balance = await props.connection.getBalance(wallet.publicKey);\n        // setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        await updateBalance();\n        // const balance = await props.connection.getBalance(wallet.publicKey);\n        // setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection, tokenMint]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  return (\n    <main>\n      {wallet && (\n        <p>Wallet {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n      )}\n\n      {wallet && <p>Balance: {(balance || 0).toLocaleString()} {tokenMint ? \"\" : \"SOL\"}</p>}\n\n      {wallet && <p>Total Available: {itemsAvailable}</p>}\n\n      {wallet && <p>Redeemed: {itemsRedeemed}</p>}\n\n      {wallet && <p>Remaining: {itemsRemaining}</p>}\n\n      <MintContainer>\n        {!wallet ? (\n          <ConnectButton>Connect Wallet</ConnectButton>\n        ) : (\n          <MintButton\n            disabled={isSoldOut || isMinting || !isActive}\n            onClick={onMint}\n            variant=\"contained\"\n          >\n            {isSoldOut ? (\n              \"SOLD OUT\"\n            ) : isActive ? (\n              isMinting ? (\n                <CircularProgress />\n              ) : (\n                \"MINT\"\n              )\n            ) : (\n              <Countdown\n                date={startDate}\n                onMount={({ completed }) => completed && setIsActive(true)}\n                onComplete={() => setIsActive(true)}\n                renderer={renderCounter}\n              />\n            )}\n          </MintButton>\n        )}\n      </MintContainer>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                config={config}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={treasury}\n                txTimeout={txTimeout}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}